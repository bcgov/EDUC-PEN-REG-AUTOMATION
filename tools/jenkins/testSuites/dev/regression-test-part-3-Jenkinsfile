#!/usr/bin/env groovy
pipeline {
  agent any
  tools {nodejs "latest"}
  environment {
    LOCAL_JSON = ''
    extJSHelper = ''
    OWNER = 'bcgov'
    TESTS_REPO_NAME = 'educ-pen-reg-automation'
  }
  stages {
    stage('Initialize') {
      steps {
        script {
          sh "wget -O - https://raw.githubusercontent.com/bcgov/EDUC-INFRA-COMMON/master/openshift/common-deployment/deployHelpers.js > deployHelpers.js"
          extJSHelper = evaluate readFile('deployHelpers.js')
        }
        dir('frontend') {
          script {
            LOCAL_JSON = sh(script: 'oc -n 8878b4-dev -o json get secret test-cafe-config | sed -n \'s/.*"local.json": "\\(.*\\)"/\\1/p\' | base64 --decode', returnStdout: true).trim()
            writeFile file: '/var/lib/jenkins/jobs/DEV/jobs/TestCafeWorkflows/jobs/TestSuites/jobs/regression-test-part-3/workspace/frontend/tests/e2e/config/index.js', text: LOCAL_JSON
          }
        }
      }
    }
    stage('insert students') {
      steps {
        dir('frontend') {
          sh 'npm install'
          sh 'npm run insertStudentForAuditHistory'
          sh 'npm run insertTwinAndMergeStudents'
          sh 'npm run insertStudentForSplit'
        }
      }
    }      
    stage('twin merge demerge audit sld and split') {
      steps {
        script {
          try{
          TOKEN = sh( script: "oc -n 8878b4-dev -o json get secret github-actions-token | sed -n 's/.*\"token\": \"\\(.*\\)\"/\\1/p' | base64 --decode", returnStdout: true);
          extJSHelper.triggerWorkflow(TOKEN, 'twin-merge-demerge-audit-sld-split-dev-environment')
          extJSHelper.waitForWorkflowRunComplete(TOKEN)
          }
          catch(err){
            currentBuild.result = 'FAILURE'
            echo "Error detected, Continue to the next step"
          }          
        }
      }
    }
    stage('create new pen and verify validation rules') {
      steps {
        script {
          try{
          TOKEN = sh( script: "oc -n 8878b4-dev -o json get secret github-actions-token | sed -n 's/.*\"token\": \"\\(.*\\)\"/\\1/p' | base64 --decode", returnStdout: true);
          extJSHelper.triggerWorkflow(TOKEN, 'validate-and-create-new-pen-dev-environment')
          extJSHelper.waitForWorkflowRunComplete(TOKEN)
          }
          catch(err){
            currentBuild.result = 'FAILURE'
            echo "Error detected, Continue to the next step"
          }          
        }
      }
    }
    stage('delete students') {
      steps {
        dir('frontend') {
          sh 'npm run deleteAuditHistoryStudent'
          sh 'npm run deleteTwinAndMergeStudents'
          sh 'npm run deleteSplitStudents'
          sh 'npm run deleteNewlyCreatedPen'
        }
      }
    }                      
  }
}